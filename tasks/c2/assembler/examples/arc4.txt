//
// arc4.txt - Proof of concept implementation of the ARC4 cipher using
//            TinyVM.
//
// Reference:
//   http://en.wikipedia.org/wiki/RC4
//
// Build as:
//  bin/tinyasm -o rc4.bin.be -b  assembler/examples/arc4.txt   # Big endian
//  bin/tinyasm -o rc4.bin.le -l  assembler/examples/arc4.txt   # Little endian
//
// Run as:
//  bin/tinyvm -i rc4.bin.be -O   # Big endian
//  bin/tinyvm -i rc4.bin.le -O   # Little endian


//
// Data object representing the cipher state
//
.object data g_rc4_ctx
 // 0..255: unsigned char S[0..255]
 //
 // Placed as first element of the object, to eliminate
 // the need for index computation when using LDB/STB to
 // access a state byte.
 .skip (256)

 // 256: unsigned char i
 .byte (0)

 // 260: unsigned char j
 .byte (0)
.end

//
// Helper function: Modulo (z = a % b)
//
.function (1) RC4Mod(@a, @b)
 LDVAR(@a)                 // tos(0) <- a
 LDVAR(@a) LDVAR(@b) UDIV  // tos(0) <- floor(a / b)
 LDVAR(@b) MUL NEG         // tos(0) <- -tos(0) * b
 ADD                       // tos(0) <- tos(1) + tos(0)
 RET                       // return a umod b
.end

//
// Helper function: Swap S[i] and S[j]
//
.function (0) RC4Swap(@ctx, @i, @j)
 .local @tmp
 LDVAR(@i) LDVAR(@ctx) LDB STVAR(@tmp) // tmp := ctx.S[i]
 LDVAR(@j) LDVAR(@ctx) LDB             // tos(0) <- ctx.S[j]
 LDVAR(@i) LDVAR(@ctx) STB             // ctx.S[i] <- tos(0)
 LDVAR(@tmp) LDVAR(@j) LDVAR(@ctx) STB // ctx.S[j] <- tos(1)
 RET
.end

// Key scheduling
//
// @ctx is the RC4 state object (see g_rc4_ctx for an example)
// @key is the object containing the raw key byte
// @offset is the offset of the first key byte in @key
// @keylen is the length of the key byte
//
.function (0) RC4KeySetup (@ctx, @key, @offset, @keylen)
 .local @i, @j

 // Step 1:
 //  for i from 0 to 255
 //   ctx.S[i] := i
 //  endfor
 IMM(0) STVAR(@i)
clear_next:
 LDVAR(@i) PEEK(0) LDVAR(@ctx) STB
 LDVAR(@i) IMM(1) ADD STVAR(@i)
 LDVAR(@i) IMM(256) UCMPLT BT(clear_next)

 // Step 2:
 //  j := 0
 //  for i from 0 to 255
 //   j := (j + S[i] + key[i mod keylength]) mod 256
 //   swap values of ctx.S[i] and ctx.S[j]
 //  endfor
 IMM(0) STVAR(@i)
 IMM(0) STVAR(@j)

schedule_next:
 LDVAR(@j) LDVAR(@i) LDVAR(@ctx) LDB ADD // tos(0) <- j + S[i]
 LDVAR(@i) LDVAR(@keylen) CALL(RC4Mod)   // tos(0) <- i % keylen
 LDVAR(@offset) ADD LDVAR(@key) LDB      // tos(0) <- key[tos(0) + offset]
 ADD IMM(255) AND STVAR(@j)              // j      <- (tos(1) + tos(0)) mod 256

 LDVAR(@ctx) LDVAR(@i) LDVAR(@j) CALL(RC4Swap)  // swap ctx.S[i] and ctx.S[j]

 LDVAR(@i) IMM(1) ADD STVAR(@i)
 LDVAR(@i) IMM(256) UCMPLT BT(schedule_next)

 // Step 3:
 //  ctx.i := 0
 //  ctx.j := 0
 IMM(0) IMM(256) LDVAR(@ctx) STB
 IMM(0) IMM(257) LDVAR(@ctx) STB

 RET
.end

// Key stream Generation
//
// @ctx is the RC4 state object (see g_rc4_ctx for an example)
// return: the next RC4 key stream byte
//
.function (1) RC4NextByte (@ctx)
 .local @i, @j, @K

 // Load i and j from state
 IMM(256) LDVAR(@ctx) LDB STVAR(@i)
 IMM(257) LDVAR(@ctx) LDB STVAR(@j)

 // i := (i + 1) mod 256
 LDVAR(@i) IMM(1) ADD IMM(255) AND STVAR(@i)

 // j := (j + S[i]) mod 256
 LDVAR(@i) LDVAR(@ctx) LDB LDVAR(@j) ADD
 IMM(255) AND
 STVAR(@j)

 // swap values of S[i] and S[j]
 LDVAR(@ctx) LDVAR(@i) LDVAR(@j) CALL(RC4Swap)

 // K := S[(S[i] + S[j]) mod 256]
 LDVAR(@i) LDVAR(@ctx) LDB    // tos(0) <- S[i]
 LDVAR(@j) LDVAR(@ctx) LDB    // tos(0) <- S[j]
 ADD IMM(255) AND             // tos(0) <- (tos(1) + tos(0)) % 256
 LDVAR(@ctx) LDB STVAR(@K)    // K <- S[tos(0)]

 // Writeback i and j to state
 LDVAR(@i) IMM(256) LDVAR(@ctx) STB
 LDVAR(@j) IMM(257) LDVAR(@ctx) STB

 // output K
 LDVAR(@K)
 RET
.end

//
// Test vector 3 [SSH ARCFOUR] found in
//  http://tools.ietf.org/html/draft-kaukonen-cipher-arcfour-01#appendix-A
//
.object data inmutable g_test_vector
 .word(16)  // Length of the key in this testvector
 .word(309) // Length of the plaintext & ciphertext messages

 // Key
 .byte (0x29, 0x04, 0x19, 0x72, 0xfb, 0x42, 0xba, 0x5f,
        0xc7, 0x12, 0x77, 0x12, 0xf1, 0x38, 0x29, 0xc9)

 // Plaintext
 .byte (0x52, 0x75, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x6e,
        0x75, 0x6e, 0x20, 0x6c, 0x61, 0x75, 0x6c, 0x75,
        0x20, 0x6b, 0x6f, 0x72, 0x76, 0x69, 0x73, 0x73,
        0x73, 0x61, 0x6e, 0x69, 0x2c, 0x20, 0x74, 0xe4,
        0x68, 0x6b, 0xe4, 0x70, 0xe4, 0x69, 0x64, 0x65,
        0x6e, 0x20, 0x70, 0xe4, 0xe4, 0x6c, 0x6c, 0xe4,
        0x20, 0x74, 0xe4, 0x79, 0x73, 0x69, 0x6b, 0x75,
        0x75, 0x2e, 0x20, 0x4b, 0x65, 0x73, 0xe4, 0x79,
        0xf6, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x6e,
        0x6e, 0x69, 0x20, 0x6f, 0x6d, 0x61, 0x6e, 0x61,
        0x6e, 0x69, 0x2c, 0x20, 0x6b, 0x61, 0x73, 0x6b,
        0x69, 0x73, 0x61, 0x76, 0x75, 0x75, 0x6e, 0x20,
        0x6c, 0x61, 0x61, 0x6b, 0x73, 0x6f, 0x74, 0x20,
        0x76, 0x65, 0x72, 0x68, 0x6f, 0x75, 0x75, 0x2e,
        0x20, 0x45, 0x6e, 0x20, 0x6d, 0x61, 0x20, 0x69,
        0x6c, 0x6f, 0x69, 0x74, 0x73, 0x65, 0x2c, 0x20,
        0x73, 0x75, 0x72, 0x65, 0x20, 0x68, 0x75, 0x6f,
        0x6b, 0x61, 0x61, 0x2c, 0x20, 0x6d, 0x75, 0x74,
        0x74, 0x61, 0x20, 0x6d, 0x65, 0x74, 0x73, 0xe4,
        0x6e, 0x20, 0x74, 0x75, 0x6d, 0x6d, 0x75, 0x75,
        0x73, 0x20, 0x6d, 0x75, 0x6c, 0x6c, 0x65, 0x20,
        0x74, 0x75, 0x6f, 0x6b, 0x61, 0x61, 0x2e, 0x20,
        0x50, 0x75, 0x75, 0x6e, 0x74, 0x6f, 0x20, 0x70,
        0x69, 0x6c, 0x76, 0x65, 0x6e, 0x2c, 0x20, 0x6d,
        0x69, 0x20, 0x68, 0x75, 0x6b, 0x6b, 0x75, 0x75,
        0x2c, 0x20, 0x73, 0x69, 0x69, 0x6e, 0x74, 0x6f,
        0x20, 0x76, 0x61, 0x72, 0x61, 0x6e, 0x20, 0x74,
        0x75, 0x75, 0x6c, 0x69, 0x73, 0x65, 0x6e, 0x2c,
        0x20, 0x6d, 0x69, 0x20, 0x6e, 0x75, 0x6b, 0x6b,
        0x75, 0x75, 0x2e, 0x20, 0x54, 0x75, 0x6f, 0x6b,
        0x73, 0x75, 0x74, 0x20, 0x76, 0x61, 0x6e, 0x61,
        0x6d, 0x6f, 0x6e, 0x20, 0x6a, 0x61, 0x20, 0x76,
        0x61, 0x72, 0x6a, 0x6f, 0x74, 0x20, 0x76, 0x65,
        0x65, 0x6e, 0x2c, 0x20, 0x6e, 0x69, 0x69, 0x73,
        0x74, 0xe4, 0x20, 0x73, 0x79, 0x64, 0xe4, 0x6d,
        0x65, 0x6e, 0x69, 0x20, 0x6c, 0x61, 0x75, 0x6c,
        0x75, 0x6e, 0x20, 0x74, 0x65, 0x65, 0x6e, 0x2e,
        0x20, 0x2d, 0x20, 0x45, 0x69, 0x6e, 0x6f, 0x20,
        0x4c, 0x65, 0x69, 0x6e, 0x6f)

 // Ciphertext (known answer)
 .byte (0x35, 0x81, 0x86, 0x99, 0x90, 0x01, 0xe6, 0xb5,
        0xda, 0xf0, 0x5e, 0xce, 0xeb, 0x7e, 0xee, 0x21,
        0xe0, 0x68, 0x9c, 0x1f, 0x00, 0xee, 0xa8, 0x1f,
        0x7d, 0xd2, 0xca, 0xae, 0xe1, 0xd2, 0x76, 0x3e,
        0x68, 0xaf, 0x0e, 0xad, 0x33, 0xd6, 0x6c, 0x26,
        0x8b, 0xc9, 0x46, 0xc4, 0x84, 0xfb, 0xe9, 0x4c,
        0x5f, 0x5e, 0x0b, 0x86, 0xa5, 0x92, 0x79, 0xe4,
        0xf8, 0x24, 0xe7, 0xa6, 0x40, 0xbd, 0x22, 0x32,
        0x10, 0xb0, 0xa6, 0x11, 0x60, 0xb7, 0xbc, 0xe9,
        0x86, 0xea, 0x65, 0x68, 0x80, 0x03, 0x59, 0x6b,
        0x63, 0x0a, 0x6b, 0x90, 0xf8, 0xe0, 0xca, 0xf6,
        0x91, 0x2a, 0x98, 0xeb, 0x87, 0x21, 0x76, 0xe8,
        0x3c, 0x20, 0x2c, 0xaa, 0x64, 0x16, 0x6d, 0x2c,
        0xce, 0x57, 0xff, 0x1b, 0xca, 0x57, 0xb2, 0x13,
        0xf0, 0xed, 0x1a, 0xa7, 0x2f, 0xb8, 0xea, 0x52,
        0xb0, 0xbe, 0x01, 0xcd, 0x1e, 0x41, 0x28, 0x67,
        0x72, 0x0b, 0x32, 0x6e, 0xb3, 0x89, 0xd0, 0x11,
        0xbd, 0x70, 0xd8, 0xaf, 0x03, 0x5f, 0xb0, 0xd8,
        0x58, 0x9d, 0xbc, 0xe3, 0xc6, 0x66, 0xf5, 0xea,
        0x8d, 0x4c, 0x79, 0x54, 0xc5, 0x0c, 0x3f, 0x34,
        0x0b, 0x04, 0x67, 0xf8, 0x1b, 0x42, 0x59, 0x61,
        0xc1, 0x18, 0x43, 0x07, 0x4d, 0xf6, 0x20, 0xf2,
        0x08, 0x40, 0x4b, 0x39, 0x4c, 0xf9, 0xd3, 0x7f,
        0xf5, 0x4b, 0x5f, 0x1a, 0xd8, 0xf6, 0xea, 0x7d,
        0xa3, 0xc5, 0x61, 0xdf, 0xa7, 0x28, 0x1f, 0x96,
        0x44, 0x63, 0xd2, 0xcc, 0x35, 0xa4, 0xd1, 0xb0,
        0x34, 0x90, 0xde, 0xc5, 0x1b, 0x07, 0x11, 0xfb,
        0xd6, 0xf5, 0x5f, 0x79, 0x23, 0x4d, 0x5b, 0x7c,
        0x76, 0x66, 0x22, 0xa6, 0x6d, 0xe9, 0x2b, 0xe9,
        0x96, 0x46, 0x1d, 0x5e, 0x4d, 0xc8, 0x78, 0xef,
        0x9b, 0xca, 0x03, 0x05, 0x21, 0xe8, 0x35, 0x1e,
        0x4b, 0xae, 0xd2, 0xfd, 0x04, 0xf9, 0x46, 0x73,
        0x68, 0xc4, 0xad, 0x6a, 0xc1, 0x86, 0xd0, 0x82,
        0x45, 0xb2, 0x63, 0xa2, 0x66, 0x6d, 0x1f, 0x6c,
        0x54, 0x20, 0xf1, 0x59, 0x9d, 0xfd, 0x9f, 0x43,
        0x89, 0x21, 0xc2, 0xf5, 0xa4, 0x63, 0x93, 0x8c,
        0xe0, 0x98, 0x22, 0x65, 0xee, 0xf7, 0x01, 0x79,
        0xbc, 0x55, 0x3f, 0x33, 0x9e, 0xb1, 0xa4, 0xc1,
        0xaf, 0x5f, 0x6a, 0x54, 0x7f)
.end

//
// RC4 Selftest Execution
//
.function[0x72633474] (0) RC4SelfTest(@ctx, @testvector)
 .local @key_len, @key_off
 .local @data_len, @plain_off, @cipher_off
 .local @t

 // Unpack the lenghts
 IMM(0) LDVAR(@testvector) LDW STVAR(@key_len)  // key_len  <- testvector.key_len
 IMM(4) LDVAR(@testvector) LDW STVAR(@data_len) // data_len <- testvector.data_len

 // Setup the offsets
 IMM(8) STVAR(@key_off)                                     // key_off  <- offset of key in testvector
 LDVAR(@key_off) LDVAR(@key_len) ADD STVAR(@plain_off)      // plain_off <- offset of plaintext in testvector
 LDVAR(@plain_off) LDVAR(@data_len) ADD STVAR(@cipher_off)  // cipher_off <- offset of ciphertext in testvector

 // Run the RC4 key schedule
 LDVAR(@ctx) LDVAR(@testvector) LDVAR(@key_off) LDVAR(@key_len)
 CALL(RC4KeySetup)

 // Iterate over the test vector data and encrypt the plaintext bytes
 // then compare to the ciphertext.
loop:
 LDVAR(@plain_off) LDVAR(@testvector) LDB         // tos <- next testvector plaintext byte
 LDVAR(@ctx) CALL(RC4NextByte)                    // get then next key byte
 XOR                                              // and encrypt it

 LDVAR(@cipher_off) LDVAR(@testvector) LDB        // load the reference ciphertext byte
 CMPEQ VMC(VM_ASSERT)                             // compare and fail on inequality

 LDVAR(@plain_off)  IMM(1) ADD STVAR(@plain_off)   // plain_off <- plain_off + 1
 LDVAR(@cipher_off) IMM(1) ADD STVAR(@cipher_off)  // cipher_off <- cipher_off + 1
 LDVAR(@data_len)   IMM(1) SUB STVAR(@data_len)    // i <- i - 1
 LDVAR(@data_len)   IMM(0) UCMPGT BT(loop)         // if (i > 0) goto loop

 // Done
 RET
.end

.object data inmutable g_secret
 // "Secret" key
 .word (16)
 .byte (
  0x78, 0x0C, 0x6E, 0x41, 0x6B, 0xC3, 0xCE, 0xF2, 0xE1, 0xB4, 0xA3, 0x7A,
  0xCD, 0xFD, 0xFB, 0x7D)

 // Secret data
 .word (981)
 .byte (
  0x6c, 0x82, 0x25, 0x07, 0x12, 0xd8, 0x8a, 0xdc, 0x85, 0x92, 0xd4, 0x51,
  0xbe, 0xb5, 0xbd, 0xf2, 0x2d, 0xa0, 0x2a, 0xf5, 0x1f, 0xff, 0xf6, 0x93,
  0x93, 0xae, 0xea, 0xaf, 0x4b, 0x7d, 0x2a, 0xd7, 0x12, 0x9c, 0xff, 0x8c,
  0x8c, 0x5a, 0xd1, 0x46, 0xc7, 0x36, 0xf4, 0xf1, 0xe2, 0x83, 0xf9, 0x0b,
  0x7f, 0xdb, 0x7d, 0xe3, 0x3f, 0xa4, 0xc8, 0x77, 0x55, 0xde, 0xeb, 0xf1,
  0xbe, 0x12, 0xb7, 0x11, 0x45, 0x8c, 0x11, 0x7f, 0x68, 0xcc, 0xae, 0x4b,
  0x21, 0x2c, 0xc8, 0x05, 0xfb, 0x72, 0x05, 0x78, 0xb8, 0xfc, 0xde, 0x97,
  0x93, 0x3a, 0x8d, 0x39, 0x49, 0x8f, 0x00, 0x4b, 0x29, 0x02, 0x58, 0x42,
  0x15, 0x50, 0xe4, 0x3f, 0xf5, 0x5f, 0x82, 0x2a, 0x2a, 0xd2, 0x5f, 0xc4,
  0x99, 0x22, 0xe6, 0x52, 0x1a, 0x37, 0xfe, 0x11, 0xff, 0x1e, 0x2a, 0xbd,
  0xc6, 0xf7, 0xca, 0xc3, 0x02, 0x68, 0x9a, 0x2d, 0xd5, 0xd9, 0x1f, 0xc9,
  0x64, 0x2c, 0x59, 0xbf, 0x87, 0xa7, 0x4e, 0xb1, 0xb7, 0x94, 0xc5, 0xb0,
  0x22, 0x2c, 0x5a, 0x46, 0x91, 0x9f, 0x70, 0x14, 0xb1, 0xbd, 0x76, 0x09,
  0x44, 0x82, 0x6b, 0xde, 0xb2, 0xf0, 0x90, 0xe8, 0x6a, 0xaa, 0xb4, 0xad,
  0x55, 0x43, 0xa7, 0x71, 0x84, 0x9e, 0x90, 0xb7, 0xaf, 0x8e, 0xd8, 0x59,
  0x3e, 0xde, 0xfc, 0xd7, 0xaa, 0x11, 0x7c, 0x42, 0x93, 0x9a, 0x6e, 0xf6,
  0xe3, 0xce, 0xd6, 0xd4, 0x2b, 0x2a, 0x7d, 0x2d, 0xa4, 0xe7, 0x4e, 0xe7,
  0x33, 0x3d, 0x07, 0x80, 0xeb, 0xec, 0xce, 0x8a, 0xbf, 0x4b, 0x82, 0xf5,
  0xc5, 0x16, 0x9d, 0x23, 0xdc, 0xf4, 0x6b, 0x01, 0x5f, 0x66, 0x68, 0x7d,
  0x0c, 0x51, 0x62, 0x05, 0x1c, 0x90, 0x26, 0x01, 0x34, 0x2a, 0x04, 0x2f,
  0x10, 0xaf, 0xb7, 0xe7, 0x63, 0x86, 0x27, 0xfa, 0x62, 0xa8, 0xea, 0xdd,
  0xe0, 0x28, 0x54, 0xd4, 0xcb, 0x86, 0xbf, 0x14, 0x7e, 0xbd, 0x74, 0x61,
  0x0f, 0x2f, 0x2b, 0x9b, 0x1e, 0xe6, 0xa5, 0x01, 0xd7, 0xd1, 0x01, 0x91,
  0xa3, 0x49, 0xb1, 0x8b, 0x53, 0x62, 0xeb, 0x1b, 0xde, 0x06, 0xee, 0xee,
  0x40, 0x47, 0xa2, 0xe1, 0xc8, 0x6f, 0x08, 0xdf, 0xae, 0x81, 0xc4, 0x2c,
  0x83, 0x1e, 0x84, 0x42, 0x07, 0x5b, 0xf8, 0xff, 0xa6, 0xf6, 0x14, 0xc2,
  0xd9, 0x89, 0xf7, 0x93, 0x67, 0x18, 0x67, 0xad, 0xe4, 0xd9, 0x8b, 0x89,
  0xa6, 0xa4, 0xb6, 0xdb, 0xde, 0x7f, 0xf8, 0x17, 0xe9, 0x12, 0xef, 0xe2,
  0x33, 0x5b, 0x4d, 0x4b, 0xc3, 0xbe, 0x6d, 0xc1, 0x35, 0x6c, 0x31, 0xeb,
  0x5e, 0xc3, 0xb2, 0x37, 0x2c, 0xd6, 0x0d, 0xdb, 0xa0, 0x5e, 0xd0, 0x75,
  0x0d, 0x10, 0xaf, 0x90, 0x4a, 0xfa, 0x36, 0x65, 0x37, 0x4b, 0x59, 0x63,
  0xc3, 0xd4, 0xf6, 0x57, 0x23, 0x5d, 0x17, 0xdb, 0x9b, 0xe2, 0x94, 0x2f,
  0x31, 0x05, 0xd2, 0x1a, 0x20, 0x8b, 0x76, 0xed, 0x76, 0x02, 0x38, 0xa2,
  0x32, 0x66, 0x61, 0x92, 0x58, 0x2c, 0x61, 0xfc, 0x11, 0x17, 0x7a, 0x57,
  0x4e, 0x5f, 0x7e, 0xb5, 0xad, 0x4e, 0x63, 0x50, 0xfc, 0x46, 0xf0, 0x88,
  0x9a, 0x8e, 0x8c, 0x9d, 0x74, 0x9c, 0x7b, 0x39, 0x8b, 0x81, 0x6a, 0x1a,
  0xe8, 0x9a, 0x47, 0x87, 0x59, 0x24, 0x93, 0x96, 0x6c, 0x5d, 0x38, 0xde,
  0x2e, 0xe9, 0x9f, 0x73, 0xe8, 0x3d, 0x21, 0x48, 0x24, 0x52, 0x4d, 0x99,
  0x1f, 0x0d, 0x35, 0x59, 0x46, 0x85, 0x7c, 0xa8, 0xcb, 0x5d, 0xe1, 0xea,
  0x22, 0x31, 0x5a, 0x79, 0x88, 0x74, 0xd3, 0xb9, 0x5a, 0x16, 0xb5, 0xd5,
  0x51, 0xd0, 0x80, 0x81, 0x04, 0x27, 0x6e, 0xb3, 0x7f, 0xca, 0x9b, 0x26,
  0x26, 0x80, 0x2c, 0xe4, 0xd3, 0xc5, 0xef, 0x89, 0x64, 0xae, 0x3b, 0xcd,
  0x69, 0xd6, 0x19, 0x29, 0x28, 0x13, 0x81, 0xa0, 0xd6, 0xd9, 0x25, 0xa6,
  0x32, 0x5b, 0xa5, 0x78, 0x23, 0xea, 0x4b, 0x5f, 0x1c, 0xdd, 0x0d, 0x0a,
  0x35, 0xb0, 0x90, 0x15, 0x97, 0xb4, 0x4e, 0x20, 0x40, 0xd3, 0x8b, 0x51,
  0xe1, 0x49, 0xfc, 0x79, 0x9b, 0xa6, 0x47, 0x32, 0xab, 0xe9, 0x13, 0x8f,
  0xb3, 0x0e, 0x40, 0x21, 0x6a, 0xb0, 0x2c, 0x81, 0xcc, 0xf1, 0x7a, 0xa7,
  0x18, 0x66, 0x3b, 0x52, 0xc1, 0x7b, 0x7d, 0x10, 0xcd, 0xe3, 0x5c, 0x7f,
  0xd6, 0xf6, 0x80, 0x78, 0xae, 0x03, 0xb6, 0x06, 0x31, 0xff, 0x24, 0x6d,
  0xc2, 0xd1, 0xdb, 0xe7, 0x31, 0x5f, 0xd0, 0xc4, 0x1d, 0x8a, 0xe4, 0x69,
  0xbd, 0x0a, 0xa4, 0xbb, 0xdc, 0xc6, 0x92, 0x71, 0xe2, 0xb3, 0xc0, 0x08,
  0xed, 0x84, 0x4e, 0x8a, 0x3c, 0x37, 0x1f, 0x2b, 0xc1, 0xa3, 0x38, 0xbb,
  0x1e, 0x34, 0xe8, 0x6b, 0xbd, 0x17, 0xad, 0x06, 0x13, 0x93, 0x6e, 0xe3,
  0x01, 0xaf, 0xf8, 0x7b, 0x22, 0xf3, 0xfa, 0x5a, 0xba, 0x36, 0x8b, 0xa8,
  0x87, 0x4b, 0x9b, 0xe7, 0xc0, 0x50, 0x03, 0x16, 0x47, 0x7c, 0x78, 0x90,
  0xeb, 0x1e, 0x6e, 0x25, 0x13, 0x3a, 0x1e, 0xa5, 0x7d, 0xca, 0x88, 0x07,
  0x00, 0xd5, 0x8a, 0x18, 0x17, 0xdb, 0x93, 0x5f, 0xb5, 0x9f, 0x7b, 0xee,
  0x2d, 0xd1, 0x8a, 0x8d, 0x31, 0x28, 0x52, 0x34, 0x5f, 0x35, 0x06, 0x59,
  0xcb, 0x6a, 0x10, 0x5d, 0x54, 0x86, 0x0a, 0xdb, 0xaa, 0xbc, 0xe0, 0x8c,
  0xdb, 0xd6, 0xc7, 0xc2, 0xbf, 0xb6, 0xf9, 0x1f, 0xdb, 0x6c, 0x63, 0xf6,
  0x42, 0xdf, 0x34, 0x8b, 0xf5, 0xfb, 0xd6, 0xa6, 0x21, 0xd4, 0xef, 0x1a,
  0xa2, 0x8e, 0x2d, 0x41, 0x0f, 0x60, 0x80, 0x18, 0x68, 0x51, 0x5f, 0x1a,
  0xa9, 0xe1, 0x5c, 0x1f, 0xdb, 0xcb, 0x31, 0xc1, 0xb4, 0x9e, 0x6a, 0xfb,
  0xa0, 0xa3, 0xe1, 0x30, 0x32, 0x58, 0xf5, 0x0c, 0x69, 0x26, 0x72, 0x6f,
  0x5d, 0x77, 0xf8, 0x73, 0x85, 0x43, 0x93, 0x45, 0x8d, 0xf4, 0xe1, 0x34,
  0x9b, 0x8c, 0xf0, 0x96, 0x83, 0x6c, 0x99, 0x61, 0x5f, 0x98, 0x13, 0x35,
  0x90, 0x45, 0xba, 0x09, 0xcf, 0x24, 0x4d, 0x8f, 0xca, 0x3c, 0xb7, 0x15,
  0x27, 0x49, 0x75, 0xe7, 0x3b, 0x75, 0xb3, 0x1f, 0x2c, 0x45, 0x02, 0x62,
  0x00, 0xc3, 0xce, 0xfe, 0x11, 0xe0, 0x33, 0xae, 0xd6, 0xac, 0x55, 0x7f,
  0xd6, 0x89, 0x9d, 0x51, 0xf3, 0xf1, 0x19, 0x02, 0xab, 0x99, 0xd7, 0x7d,
  0xf4, 0x62, 0x1f, 0xdb, 0x8f, 0xd5, 0xe0, 0xfd, 0xa5, 0x98, 0xdb, 0x9a,
  0xf0, 0x2b, 0x70, 0xa2, 0xef, 0xf6, 0xf2, 0x3f, 0xa2, 0x81, 0x4c, 0x85,
  0xb0, 0x28, 0x99, 0x59, 0xe5, 0x8e, 0x6f, 0xf7, 0x2d, 0xcf, 0xf2, 0x94,
  0xbe, 0x55, 0x21, 0x60, 0x39, 0x4f, 0x6e, 0x80, 0xb8, 0x93, 0x02, 0xeb,
  0x8f, 0x24, 0xbe, 0xa6, 0x45, 0xc3, 0x7e, 0x98, 0x82, 0x6a, 0x7a, 0x29,
  0xb0, 0x97, 0x4f, 0x5b, 0x88, 0x6e, 0x5d, 0x29, 0xcd, 0x54, 0xb1, 0x30,
  0x5a, 0x6f, 0x0b, 0x89, 0x06, 0xc8, 0x60, 0x9b, 0x6a, 0xe8, 0xb8, 0xb5,
  0xf9, 0xee, 0xbd, 0x76, 0xf2, 0x52, 0x43, 0x91, 0x27, 0x28, 0x5e, 0x43,
  0x40, 0xeb, 0xa7, 0xf9, 0x7e, 0x0d, 0x2c, 0x31, 0x2b, 0xc8, 0x35, 0x7c,
  0xef, 0xc4, 0xb1, 0x4c, 0x63, 0x0e, 0x56, 0xd1, 0x50, 0x84, 0xa4, 0xd7,
  0x43, 0x44, 0xf2, 0xa8, 0x84, 0x1d, 0x35, 0x18, 0x46, 0xfd, 0x39, 0x3b,
  0xcb, 0x05, 0xa3, 0x16, 0xfa, 0x15, 0x52, 0x13, 0x69
 )
.end

.function (0) revealTheSecret(@ctx, @secret)
 .local @keylen, @keyoff, @datalen, @dataoff

 // Parse the key length and offset
 IMM(0) LDVAR(@secret) LDW STVAR(@keylen)
 IMM(4) STVAR(@keyoff)

 // Now parse the data length and data offset
 LDVAR(@keyoff) LDVAR(@keylen) ADD LDVAR(@secret) LDW STVAR(@datalen)
 LDVAR(@keyoff) LDVAR(@keylen) ADD IMM(4) ADD STVAR(@dataoff)

 // Setup the ARC4 context
 LDVAR(@ctx)
 LDVAR(@secret)
 LDVAR(@keyoff)
 LDVAR(@keylen)
 CALL(RC4KeySetup)

 // Now decrypt byte by byte (and show it!)
loop:
 LDVAR(@datalen) IMM(0) CMPNE BF(done)      // if (!(datalen != 0)) goto done;

 LDVAR(@dataoff) LDVAR(@secret) LDB         // tos <- next ciphertext
 LDVAR(@ctx) CALL(RC4NextByte)              // get then next key byte
 XOR VMC(VM_WRITE)                          // decrypt and print

 LDVAR(@dataoff) IMM(1) ADD STVAR(@dataoff) // dataoff <- dataoff + 1
 LDVAR(@datalen) IMM(1) SUB STVAR(@datalen) // datalen <- datalen - 1
 JMP(loop)                                  // goto loop;

 // Done
done:
 RET
.end

.function (0) main()

 // First run the selftest
 HANDLE(g_rc4_ctx)
 HANDLE(g_test_vector)
 CALL(RC4SelfTest)

 // Decrypt the secret message (and print it on stdout)
 HANDLE(g_rc4_ctx)
 HANDLE(g_secret)
 CALL(revealTheSecret)

 // Done
 VMC(VM_EXIT)
.end
